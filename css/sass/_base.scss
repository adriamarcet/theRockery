/*-- MIXINS --*/
@mixin cf {
	&:before,
	&:after {
		content: " ";
		display: table;
	}

	&:after {
		clear: both;
	}

	& {
		*zoom: 1;
	}
}

@mixin border-box {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	-ms-box-sizing: border-box;
	box-sizing: border-box;
}

@mixin truncate {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

@mixin box-shadow($hor, $ver, $blur, $spread, $color: black) {
	-moz-box-shadow:    $hor $ver $blur $spread $color;
	-webkit-box-shadow: $hor $ver $blur $spread $color;
	box-shadow:         $hor $ver $blur $spread $color;
}

@mixin border-radius($radius) {
	-webkit-border-radius: $radius; 
	-moz-border-radius: $radius; 
	border-radius: $radius; 
}

@mixin border-radius-hv($h, $v) {
	-webkit-border-radius: $h $v; 
	-moz-border-radius: $h $v; 
	border-radius: $h $v; 
}

@mixin rowMachine($numPerRow, $margin) {
  width: ((100% - (($numPerRow - 1) * $margin)) / $numPerRow);
  &:nth-child(n) {
    margin-bottom: $margin;
    margin-right: $margin;
  }
  &:nth-child(#{$numPerRow}n) {
    margin-right: 0;
    margin-bottom: 0;
  }
}

@mixin gr-to-white {
	background: rgba(255,255,255,0);
	background: -moz-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 96%, rgba(255,255,255,1) 100%);
	background: -webkit-gradient(left top, left bottom, color-stop(0%, rgba(255,255,255,0)), color-stop(96%, rgba(255,255,255,1)), color-stop(100%, rgba(255,255,255,1)));
	background: -webkit-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 96%, rgba(255,255,255,1) 100%);
	background: -o-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 96%, rgba(255,255,255,1) 100%);
	background: -ms-linear-gradient(top, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 96%, rgba(255,255,255,1) 100%);
	background: linear-gradient(to bottom, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 96%, rgba(255,255,255,1) 100%);
	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#ffffff', GradientType=0 );
}


/*-- FUNCTIONS --*/
@function px2em ($pxval, $base: 16) {
	// Function to take a pixel value and divide it by a base value in order to
	// return the size in ems. Default base value is 16px
	
	@return ($pxval / $base) * 1em; // multiply by 1em to convert px to ems.
	//@return #{$pxval}px;
}

@function calculateRem($size) {
  $remSize: $size/16px;
  @return #{$remSize}rem;
}

@mixin fontSize($size) {
  font-size: $size; //Fallback in px  
  font-size: calculateRem($size);

  // line-height: $baseline/$size;
}

/*-- Queries --*/

$preTablet: 35em; /* 560px/16px = 35em */
$tablet: 40em; /*640px/16px = 38.75em*/
$preDesktop: 54.375em; // 870/16px
$desktop: 58.3125em; //933/16px
$afterDesktop: 66.875em; // 1070px / 16px
$panoramic: 1612px;